import com.palominolabs.gradle.task.git.clone.GitCloneTask
import groovy.io.FileType

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
    }
}

plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'pl.allegro.tech.build.axion-release' version '1.4.1'
    id "com.github.maiflai.scalatest" version "0.14"
}

repositories {
    mavenCentral()
}

ext {
    versions = [:]
}

versions = [
        scala     : '2.11',
        scalaBuild: '8',
        akka      : '2.4.14',
        akkaHttp  : '10.0.0',
        swaggerUi : '2.2.6',
        betterFiles: '2.16.0'
]

dependencies {
    testRuntime group: 'org.pegdown', name: 'pegdown', version: '1.6.0'
    testCompile group: 'org.scalatest', name: "scalatest_$versions.scala", version: '3.0.0'
    testCompile group: 'com.typesafe.akka', name: "akka-testkit_$versions.scala", version: versions.akka
    testCompile group: 'com.typesafe.akka', name: "akka-http-testkit_$versions.scala", version: versions.akkaHttp
    compile group: 'org.scala-lang', name: 'scala-library', version: "$versions.scala.$versions.scalaBuild"
    compile group: 'com.typesafe.akka', name: "akka-actor_$versions.scala", version: versions.akka
    compile group: 'com.typesafe.akka', name: "akka-http_$versions.scala", version: versions.akkaHttp
}

group 'com.matfax'
version scmVersion.version

[compileScala, compileTestScala]*.options*.encoding = 'UTF-8'

def swaggerUiVersion = 'v2.2.8'

task cloneSwaggerUi(type: GitCloneTask) {
    dir = file("$buildDir/repositories/swagger-ui")
    uri = 'https://github.com/swagger-api/swagger-ui.git'
    treeish = swaggerUiVersion
}

task unzipSwaggerUi(type: Copy) {
    from file("$buildDir/repositories/swagger-ui/dist")
    into file("${buildDir}/resources/main/swagger-ui")
    dependsOn cloneSwaggerUi
    includeEmptyDirs = false
}

compileScala {
    dependsOn unzipSwaggerUi
}

def getFolderFiles(path, suffix) {
    def sourceDir = file(path)
    def fileList = []
    sourceDir.traverse(type: FileType.FILES, maxDepth: 0) {
        if (it.name.endsWith(suffix)) {
            fileList.add(it)
        }
    }
    return fileList
}

def sourceFiles = getFolderFiles("$rootDir/src/", ".scala")

scmVersion {
    tag {
        prefix = 'swuiakht'
    }
    hooks {
        pre 'fileUpdate', [files: sourceFiles, pattern: { v, c -> /@version $v/ }, replacement: { v, c -> "@version $v" }]
        pre 'commit'
    }
}
